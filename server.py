import asyncio
from aiohttp import web, WSMsgType

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
clients = set()

async def websocket_handler(request: web.Request) -> web.WebSocketResponse:
    # heartbeat –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ping –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥
    ws = web.WebSocketResponse(heartbeat=30)
    await ws.prepare(request)

    clients.add(ws)
    print("üîó –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")

    try:
        async for msg in ws:
            if msg.type == WSMsgType.TEXT:
                # –ø—Ä–æ—Å—Ç—ã–µ keep-alive –∑–∞–ø—Ä–æ—Å—ã —Å –∫–ª–∏–µ–Ω—Ç–∞
                if msg.data == "ping":
                    await ws.send_str("pong")
            elif msg.type == WSMsgType.ERROR:
                print(f"‚ö†Ô∏è WS error: {ws.exception()}")
    finally:
        clients.discard(ws)
        print("‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")

    return ws

async def post_news(request: web.Request) -> web.Response:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º JSON –≤–∏–¥–∞: { "message": "—Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏" }
    –†–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ WS.
    """
    try:
        data = await request.json()
        message = data.get("message")
    except Exception:
        return web.json_response({"error": "Invalid JSON"}, status=400)

    if not message:
        return web.json_response({"error": "Message is required"}, status=400)

    # —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º
    for ws in list(clients):
        if not ws.closed:
            await ws.send_str(message)

    print(f"üì¢ –†–∞–∑–æ—Å–ª–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: {message}")
    return web.json_response({"status": "ok", "delivered_to": len(clients)})

async def index(request: web.Request) -> web.FileResponse:
    return web.FileResponse("templates/index.html")

def create_app() -> web.Application:
    app = web.Application()
    app.router.add_get("/", index)
    app.router.add_get("/ws", websocket_handler)
    app.router.add_post("/news", post_news)
    return app

if __name__ == "__main__":
    # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Ä—Ç 8080; –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    web.run_app(create_app(), host="0.0.0.0", port=8080)
